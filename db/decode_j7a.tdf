--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" LPM_DECODES=9 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_j7a
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[8..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[8..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1216w[1..0]	: WIRE;
	w_anode1225w[3..0]	: WIRE;
	w_anode1242w[3..0]	: WIRE;
	w_anode1252w[3..0]	: WIRE;
	w_anode1262w[3..0]	: WIRE;
	w_anode1272w[3..0]	: WIRE;
	w_anode1282w[3..0]	: WIRE;
	w_anode1292w[3..0]	: WIRE;
	w_anode1302w[3..0]	: WIRE;
	w_anode1314w[1..0]	: WIRE;
	w_anode1321w[3..0]	: WIRE;
	w_anode1332w[3..0]	: WIRE;
	w_anode1342w[3..0]	: WIRE;
	w_anode1352w[3..0]	: WIRE;
	w_anode1362w[3..0]	: WIRE;
	w_anode1372w[3..0]	: WIRE;
	w_anode1382w[3..0]	: WIRE;
	w_anode1392w[3..0]	: WIRE;
	w_data1214w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[8..0] = eq_wire[8..0];
	eq_wire[] = ( ( w_anode1392w[3..3], w_anode1382w[3..3], w_anode1372w[3..3], w_anode1362w[3..3], w_anode1352w[3..3], w_anode1342w[3..3], w_anode1332w[3..3], w_anode1321w[3..3]), ( w_anode1302w[3..3], w_anode1292w[3..3], w_anode1282w[3..3], w_anode1272w[3..3], w_anode1262w[3..3], w_anode1252w[3..3], w_anode1242w[3..3], w_anode1225w[3..3]));
	w_anode1216w[] = ( (w_anode1216w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode1225w[] = ( (w_anode1225w[2..2] & (! w_data1214w[2..2])), (w_anode1225w[1..1] & (! w_data1214w[1..1])), (w_anode1225w[0..0] & (! w_data1214w[0..0])), w_anode1216w[1..1]);
	w_anode1242w[] = ( (w_anode1242w[2..2] & (! w_data1214w[2..2])), (w_anode1242w[1..1] & (! w_data1214w[1..1])), (w_anode1242w[0..0] & w_data1214w[0..0]), w_anode1216w[1..1]);
	w_anode1252w[] = ( (w_anode1252w[2..2] & (! w_data1214w[2..2])), (w_anode1252w[1..1] & w_data1214w[1..1]), (w_anode1252w[0..0] & (! w_data1214w[0..0])), w_anode1216w[1..1]);
	w_anode1262w[] = ( (w_anode1262w[2..2] & (! w_data1214w[2..2])), (w_anode1262w[1..1] & w_data1214w[1..1]), (w_anode1262w[0..0] & w_data1214w[0..0]), w_anode1216w[1..1]);
	w_anode1272w[] = ( (w_anode1272w[2..2] & w_data1214w[2..2]), (w_anode1272w[1..1] & (! w_data1214w[1..1])), (w_anode1272w[0..0] & (! w_data1214w[0..0])), w_anode1216w[1..1]);
	w_anode1282w[] = ( (w_anode1282w[2..2] & w_data1214w[2..2]), (w_anode1282w[1..1] & (! w_data1214w[1..1])), (w_anode1282w[0..0] & w_data1214w[0..0]), w_anode1216w[1..1]);
	w_anode1292w[] = ( (w_anode1292w[2..2] & w_data1214w[2..2]), (w_anode1292w[1..1] & w_data1214w[1..1]), (w_anode1292w[0..0] & (! w_data1214w[0..0])), w_anode1216w[1..1]);
	w_anode1302w[] = ( (w_anode1302w[2..2] & w_data1214w[2..2]), (w_anode1302w[1..1] & w_data1214w[1..1]), (w_anode1302w[0..0] & w_data1214w[0..0]), w_anode1216w[1..1]);
	w_anode1314w[] = ( (w_anode1314w[0..0] & data_wire[3..3]), enable_wire);
	w_anode1321w[] = ( (w_anode1321w[2..2] & (! w_data1214w[2..2])), (w_anode1321w[1..1] & (! w_data1214w[1..1])), (w_anode1321w[0..0] & (! w_data1214w[0..0])), w_anode1314w[1..1]);
	w_anode1332w[] = ( (w_anode1332w[2..2] & (! w_data1214w[2..2])), (w_anode1332w[1..1] & (! w_data1214w[1..1])), (w_anode1332w[0..0] & w_data1214w[0..0]), w_anode1314w[1..1]);
	w_anode1342w[] = ( (w_anode1342w[2..2] & (! w_data1214w[2..2])), (w_anode1342w[1..1] & w_data1214w[1..1]), (w_anode1342w[0..0] & (! w_data1214w[0..0])), w_anode1314w[1..1]);
	w_anode1352w[] = ( (w_anode1352w[2..2] & (! w_data1214w[2..2])), (w_anode1352w[1..1] & w_data1214w[1..1]), (w_anode1352w[0..0] & w_data1214w[0..0]), w_anode1314w[1..1]);
	w_anode1362w[] = ( (w_anode1362w[2..2] & w_data1214w[2..2]), (w_anode1362w[1..1] & (! w_data1214w[1..1])), (w_anode1362w[0..0] & (! w_data1214w[0..0])), w_anode1314w[1..1]);
	w_anode1372w[] = ( (w_anode1372w[2..2] & w_data1214w[2..2]), (w_anode1372w[1..1] & (! w_data1214w[1..1])), (w_anode1372w[0..0] & w_data1214w[0..0]), w_anode1314w[1..1]);
	w_anode1382w[] = ( (w_anode1382w[2..2] & w_data1214w[2..2]), (w_anode1382w[1..1] & w_data1214w[1..1]), (w_anode1382w[0..0] & (! w_data1214w[0..0])), w_anode1314w[1..1]);
	w_anode1392w[] = ( (w_anode1392w[2..2] & w_data1214w[2..2]), (w_anode1392w[1..1] & w_data1214w[1..1]), (w_anode1392w[0..0] & w_data1214w[0..0]), w_anode1314w[1..1]);
	w_data1214w[2..0] = data_wire[2..0];
END;
--VALID FILE
